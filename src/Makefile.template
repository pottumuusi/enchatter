ECHO=@$$(which echo)

# Assign variables created by configure (all lowercase) to Make variables.
PROJECT_ROOT_DIR := $(omnichat_root)
ROOT_DIR := $(PROJECT_ROOT_DIR)/src

OUT_DIR := $(ROOT_DIR)/out
BIN_DIR := $(OUT_DIR)/bin
LIB_DIR := $(ROOT_DIR)/lib
SRC_DIR := $(ROOT_DIR)/src
LIB_OUT_DIR := $(OUT_DIR)/lib
LIBKTLS_OUT_DIR := $(LIB_OUT_DIR)/libktls

EVERY_OUT_DIR := \
	$(OUT_DIR) \
	$(BIN_DIR) \
	$(LIB_OUT_DIR) \
	$(LIBKTLS_OUT_DIR)

RUST_OUT_DIR := $(ROOT_DIR)/target
# TODO
# Tell cargo to output file to bin dir instead
RUST_BIN_DIR := $(RUST_OUT_DIR)/debug

# APP_DIR := $(SRC_DIR)/app

OMNICHAT_BIN := $(BIN_DIR)/omnichat
CORE_BIN := $(RUST_BIN_DIR)/core
CLIENT_BIN := $(RUST_BIN_DIR)/client
SERVER_BIN := $(RUST_BIN_DIR)/server
LIBKTLS := $(LIBKTLS_OUT_DIR)/libktls.a

LIBKTLS_SRC_DIR := $(SRC_DIR)/libktls
CORE_SRC_DIR := $(SRC_DIR)/core
CLIENT_SRC_DIR := $(SRC_DIR)/client
SERVER_SRC_DIR := $(SRC_DIR)/server

# TODO
# Seriously should do this with submake. Then can use general rule for .c files
LIBKTLS_SRC_FILE1 := $(LIBKTLS_SRC_DIR)/fun1.c
LIBKTLS_SRC_FILE2 := $(LIBKTLS_SRC_DIR)/fun2.c
LIBKTLS_OBJ_FILE1 := $(LIBKTLS_OUT_DIR)/fun1.o
LIBKTLS_OBJ_FILE2 := $(LIBKTLS_OUT_DIR)/fun2.o

# LIBKTLS_SRC_FILES := $(wildcard $(LIBKTLS_SRC_DIR)/*.c)
LIBKTLS_OBJ_FILES := \
	$(LIBKTLS_OBJ_FILE1) \
	$(LIBKTLS_OBJ_FILE2)
CORE_SRC_FILES := $(wildcard $(CORE_SRC_DIR)/*.rs)
CLIENT_SRC_FILES := $(wildcard $(CLIENT_SRC_DIR)/*.rs)
SERVER_SRC_FILES := $(wildcard $(SERVER_SRC_DIR)/*.rs)

REPO_NAME := omnichat

# GLOBAL_ENCHATTER_LINK_PATH := /usr/local/bin/enchatter

define compile_no_link_from_to
	$(eval IN_PATH=$1)
	$(eval OUT_PATH=$2)

	$(CC) -o $(OUT_PATH) -c $(IN_PATH)
endef

define create_out_directory_structure
	$(foreach dir, $(EVERY_OUT_DIR), mkdir -p $(dir))
endef

# TODO
# Create test target. First test could check linking C with Rust
# successfully.
#
# Rust unit tests are to be ran by using 'cargo test'

# Make does not consider implicit rules for PHONY targets
# .PHONY: all clean testrun install uninstall clean-app clean-enchatter
.PHONY: out clean

MAIN_TARGETS := \
	out \
	core \
	client \
	server \
	$(LIBKTLS)

all: $(MAIN_TARGETS)

out:
	$(call create_out_directory_structure)

clean:
	rm -f $(LIBKTLS)
	rm -f $(LIBKTLS_OBJ_FILES)
	rm -rf $(RUST_OUT_DIR)

core: out $(CORE_BIN)
	$(ECHO) core build done

client: out $(CLIENT_BIN)
	$(ECHO) client build done

server: out $(SERVER_BIN)
	$(ECHO) server build done

$(LIBKTLS): out $(LIBKTLS_OBJ_FILES)
	ar rvs $@ $^

$(LIBKTLS_OBJ_FILE1): $(LIBKTLS_SRC_FILE1)
	$(call compile_no_link_from_to, $<, $@)

$(LIBKTLS_OBJ_FILE2): $(LIBKTLS_SRC_FILE2)
	$(call compile_no_link_from_to, $<, $@)

$(CLIENT_BIN): $(CLIENT_SRC_FILES)
	cd $(SRC_DIR) && cargo build --bin client

$(SERVER_BIN): $(SERVER_SRC_FILES)
	cd $(SRC_DIR) && cargo build --bin server

$(CORE_BIN): $(CORE_SRC_FILES) $(LIBKTLS)
	cd $(SRC_DIR) && RUSTFLAGS="-L $(LIBKTLS_OUT_DIR)" cargo build --bin core
